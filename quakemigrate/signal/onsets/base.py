"""
A simple abstract base class with method stubs to enable users to extend QuakeMigrate
with custom onset functions that remain compatible with the core of the package.

Also contains a light class to encapsulate the data generated by the onset function, to
be used for migration or phase picking.

:copyright:
    2020â€“2025, QuakeMigrate developers.
:license:
    GNU General Public License, Version 3
    (https://www.gnu.org/licenses/gpl-3.0.html)

"""

from abc import ABC, abstractmethod

import numpy as np
from obspy import Stream, UTCDateTime

import quakemigrate.util as util


class Onset(ABC):
    """
    Base class for onset functions that are used to transform waveform data prior to
    migration within QuakeMigrate.

    Attributes
    ----------
    sampling_rate : int
        Desired sampling rate for input data; sampling rate at which the onset functions
        will be computed.
    pre_pad : float, optional
        Option to override the default pre-pad duration of data to read before computing
        4-D coalescence in detect() and locate().
    post_pad : float
        Option to override the default post-pad duration of data to read before
        computing 4-D coalescence in detect() and locate().

    Notes
    -----
    Subclasses must implement:
    - calculate_onsets(): Core transformation logic
    - gaussian_halfwidth(): For compatibility with GaussianPicker
    - pre_pad and post_pad properties: Configuration for padding

    """

    def __init__(self, sampling_rate: int, **kwargs) -> None:
        """Instantiate the Onset object."""

        if not isinstance(sampling_rate, (int, float)) or sampling_rate <= 0:
            raise ValueError("sampling rate must be a positive number.")
        self.sampling_rate = int(sampling_rate)

        self._pre_pad = 0
        self._post_pad = 0

    def __str__(self) -> str:
        """Return short summary string of the Onset object."""

        return "Base Onset object - add a __str__ method to your Onset class"

    def pad(self, timespan: float) -> tuple[float, float]:
        """
        Determine the number of samples needed to pre- and post-pad the timespan.

        Parameters
        ----------
        timespan:
            The time window to pad.

        Returns
        -------
         :
            Option to override the default pre-pad duration of data to read before
            computing 4-D coalescence in detect() and locate().
         :
            Option to override the default post-pad duration of data to read before
            computing 4-D coalescence in detect() and locate().

        """

        if timespan <= 0:
            raise ValueError("timespan must be positive.")

        # Add additional padding for any tapering applied to data
        timespan += self.pre_pad + self.post_pad
        taper_pad = np.ceil(timespan * 0.06)

        pre_pad = util.trim2sample(self.pre_pad + taper_pad, self.sampling_rate)
        post_pad = util.trim2sample(self.post_pad + taper_pad, self.sampling_rate)

        return pre_pad, post_pad

    def gaussian_halfwidth(self, phase: str) -> float | None:
        """Method stub for Gaussian half-width estimate."""

        raise AttributeError(
            "In order to use the GaussianPicker module with a custom Onset, you need "
            "to provide a 'gaussian_halfwidth' method."
        )

    @abstractmethod
    def calculate_onsets(self):
        """Method stub for calculation of onset functions."""
        pass

    @property
    @abstractmethod
    def pre_pad(self) -> float | None:
        """Get property stub for pre_pad."""
        return self._pre_pad

    @pre_pad.setter
    @abstractmethod
    def pre_pad(self, value: float) -> None:
        """Set property stub for pre_pad."""
        if not isinstance(value, float) or value < 0:
            raise ValueError("pre_pad must be a non-negative number.")
        self._pre_pad = value

    @property
    @abstractmethod
    def post_pad(self) -> float | None:
        """Get property stub for pre_pad."""
        return self._post_pad

    @post_pad.setter
    @abstractmethod
    def post_pad(self, value: float) -> None:
        """Set property stub for pre_pad."""
        if not isinstance(value, float) or value < 0:
            raise ValueError("post_pad must be a non-negative number.")
        self._post_pad = value


class OnsetData:
    """
    The OnsetData class encapsulates the onset functions calculated by transforming
    seismic data using the chosen onset detection algorithm (characteristic function).

    This includes a dictionary describing which onset functions are available for each
    station and phase, and the intermediary filtered or otherwise pre-processed waveform
    data used to calculate the onset function.

    Parameters
    ----------
    onsets:
        Keys "station", each of which contains keys for each phase, e.g. "P" and "S".
        {"station": {"P": `p_onset`, "S": `s_onset`}}. Onset functions are calculated by
        transforming the raw seismic data using some characteristic function designed to
        highlight phase arrivals.
    phases:
        Phases for which onsets have been calculated. (e.g. ["P", "S"])
    channel_maps:
        Data component maps - keys are phases. (e.g. {"P": "Z"})
    filtered_waveforms:
        Filtered and/or resampled and otherwise processed seismic data generated during
        onset function generation. Only contains waveforms that have passed the quality
        control criteria, at a unified sampling rate - see `sampling_rate`.
    availability:
        Dictionary with keys "station_phase", containing 1's or 0's corresponding to
        whether an onset function is available for that station and phase - determined
        by data availability and quality checks.
    starttime:
        Start time of onset functions.
    endtime:
        End time of onset functions.
    sampling_rate:
        Sampling rate of filtered waveforms and onset functions.

    """

    def __init__(
        self,
        onsets: dict,
        phases: list[str],
        channel_maps: dict,
        filtered_waveforms: Stream,
        availability: dict,
        starttime: UTCDateTime,
        endtime: UTCDateTime,
        sampling_rate: int,
    ) -> None:
        """Instantiate the OnsetData object."""

        self.onsets = onsets
        self.phases = phases
        self.channel_maps = channel_maps
        self.filtered_waveforms = filtered_waveforms
        self.availability = availability

        self.starttime = starttime
        self.endtime = endtime
        self.sampling_rate = sampling_rate
